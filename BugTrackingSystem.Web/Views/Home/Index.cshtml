@model BugTrackingSystem.ViewModels.Dashboard.DashboardViewModel
@{
    ViewData["Title"] = "Dashboard";
}

@functions {
    private string GetStatusBadgeClass(string status)
    {
        return status?.ToLower() switch
        {
            "new" => "info",
            "in test" => "warning",
            "in development" => "primary",
            "ready for regression" => "info",
            "closed" => "success",
            _ => "secondary"
        };
    }

    private string GetProgressBarClass(string status)
    {
        return status?.ToLower() switch
        {
            "new" => "info",
            "in test" => "warning",
            "in development" => "primary",
            "ready for regression" => "info",
            "closed" => "success",
            _ => "secondary"
        };
    }

    private string GetPriorityBadgeClass(string priority)
    {
        return priority?.ToLower() switch
        {
            "critical" => "danger",
            "high" => "warning",
            "medium" => "info",
            "low" => "secondary",
            _ => "secondary"
        };
    }

    private string GetPriorityProgressClass(string priority)
    {
        return priority?.ToLower() switch
        {
            "critical" => "danger",
            "high" => "warning",
            "medium" => "info",
            "low" => "secondary",
            _ => "secondary"
        };
    }

    private int GetPriorityOrder(string priority)
    {
        return priority?.ToLower() switch
        {
            "critical" => 4,
            "high" => 3,
            "medium" => 2,
            "low" => 1,
            _ => 0
        };
    }

    private string GetTimeAgo(DateTime timestamp)
    {
        var timeSpan = DateTime.UtcNow - timestamp;
        
        if (timeSpan.TotalMinutes < 1)
            return "just now";
        if (timeSpan.TotalMinutes < 60)
            return $"{(int)timeSpan.TotalMinutes} minutes ago";
        if (timeSpan.TotalHours < 24)
            return $"{(int)timeSpan.TotalHours} hours ago";
        if (timeSpan.TotalDays < 7)
            return $"{(int)timeSpan.TotalDays} days ago";
        
        return timestamp.ToString("MMM dd, yyyy");
    }
}

<!-- Welcome Section -->
<div class="mb-4">
    <h2 class="text-primary mb-2">@Model.WelcomeMessage</h2>
    <p class="text-muted">Monitor and manage your bug tracking system from this central dashboard.</p>
</div>

<!-- Dashboard Cards -->
<div class="dashboard-cards">
    <div class="dashboard-card blue">
        <div class="card-header">
            <h6 class="card-title">Total Bug Reports</h6>
            <i class="fas fa-bug card-icon"></i>
        </div>
        <div class="card-value">@Model.Stats.TotalBugReports</div>
        <p class="card-description">Active bug reports in the system</p>
        @if (Model.Stats.TotalBugReportsChange != 0)
        {
            <small class="text-muted">
                <i class="fas fa-arrow-@(Model.Stats.TotalBugReportsChange > 0 ? "up text-success" : "down text-danger")"></i>
                @Math.Abs(Model.Stats.TotalBugReportsChange).ToString("F1")% from last month
            </small>
        }
    </div>

    <div class="dashboard-card green">
        <div class="card-header">
            <h6 class="card-title">Resolved Issues</h6>
            <i class="fas fa-check-circle card-icon"></i>
        </div>
        <div class="card-value">@Model.Stats.ResolvedIssues</div>
        <p class="card-description">Successfully resolved this month</p>
        @if (Model.Stats.ResolvedIssuesChange != 0)
        {
            <small class="text-muted">
                <i class="fas fa-arrow-@(Model.Stats.ResolvedIssuesChange > 0 ? "up text-success" : "down text-danger")"></i>
                @Math.Abs(Model.Stats.ResolvedIssuesChange).ToString("F1")% from last month
            </small>
        }
    </div>

    <div class="dashboard-card orange">
        <div class="card-header">
            <h6 class="card-title">Pending Review</h6>
            <i class="fas fa-clock card-icon"></i>
        </div>
        <div class="card-value">@Model.Stats.PendingReview</div>
        <p class="card-description">Awaiting developer review</p>
    </div>

    <div class="dashboard-card primary">
        <div class="card-header">
            <h6 class="card-title">Active Users</h6>
            <i class="fas fa-users card-icon"></i>
        </div>
        <div class="card-value">@Model.Stats.ActiveUsers</div>
        <p class="card-description">Users active this week</p>
    </div>
</div>

<!-- Additional Stats Row -->
<div class="dashboard-cards">
    <div class="dashboard-card orange">
        <div class="card-header">
            <h6 class="card-title">New This Week</h6>
            <i class="fas fa-plus-circle card-icon"></i>
        </div>
        <div class="card-value">@Model.Stats.NewThisWeek</div>
        <p class="card-description">Recently reported issues</p>
    </div>

    <div class="dashboard-card blue">
        <div class="card-header">
            <h6 class="card-title">In Progress</h6>
            <i class="fas fa-cogs card-icon"></i>
        </div>
        <div class="card-value">@Model.Stats.InProgress</div>
        <p class="card-description">Currently being developed</p>
    </div>

    <div class="dashboard-card primary">
        <div class="card-header">
            <h6 class="card-title">High Priority</h6>
            <i class="fas fa-exclamation-triangle card-icon"></i>
        </div>
        <div class="card-value">@Model.Stats.HighPriority</div>
        <p class="card-description">Urgent issues requiring attention</p>
    </div>

    <div class="dashboard-card orange">
        <div class="card-header">
            <h6 class="card-title">Overdue Issues</h6>
            <i class="fas fa-calendar-times card-icon"></i>
        </div>
        <div class="card-value">@Model.Stats.OverdueIssues</div>
        <p class="card-description">Issues older than 30 days</p>
    </div>
</div>

<!-- Quick Actions -->
<div class="row mb-4">
    <div class="col-md-8">
        <div class="card">
            <div class="card-header bg-light">
                <h5 class="mb-0">
                    <i class="fas fa-chart-line text-primary me-2"></i>
                    Recent Activity
                </h5>
            </div>
            <div class="card-body">
                @if (Model.RecentActivity.Any())
                {
                    @foreach (var activity in Model.RecentActivity)
                    {
                        <div class="d-flex align-items-center mb-3">
                            <div class="badge badge-@GetStatusBadgeClass(activity.Status) me-3">@activity.Status.ToUpper()</div>
                            <div class="flex-grow-1">
                                <strong>@activity.Title</strong>
                                <small class="text-muted d-block">
                                    @activity.ActivityType by @activity.UserName • @GetTimeAgo(activity.Timestamp)
                                </small>
                            </div>
                            <a href="/BugReport/Details/@activity.Id" class="btn btn-sm btn-outline-primary">
                                <i class="fas fa-eye"></i>
                            </a>
                        </div>
                    }
                }
                else
                {
                    <div class="text-center text-muted py-4">
                        <i class="fas fa-inbox fa-2x mb-2"></i>
                        <p>No recent activity to display</p>
                    </div>
                }
            </div>
        </div>
    </div>
    
    <div class="col-md-4">
        <div class="card">
            <div class="card-header bg-light">
                <h5 class="mb-0">
                    <i class="fas fa-rocket text-success me-2"></i>
                    Quick Actions
                </h5>
            </div>
            <div class="card-body">
                <div class="d-grid gap-2">
                    <button class="btn btn-primary" onclick="handleReportProblem()">
                        <i class="fas fa-plus me-2"></i>Report New Bug
                    </button>
                    <button class="btn btn-success" onclick="window.location.href='/BugReport/List'">
                        <i class="fas fa-list me-2"></i>View All Reports
                    </button>
                    <button class="btn btn-warning" onclick="window.location.href='/Applications/List'">
                        <i class="fas fa-desktop me-2"></i>Manage Applications
                    </button>
                    @if (User.IsInRole("Administrator"))
                    {
                        <button class="btn btn-info" onclick="window.location.href='/User/List'">
                            <i class="fas fa-users-cog me-2"></i>User Management
                        </button>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Statistics Section -->
<div class="row">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header bg-light">
                <h5 class="mb-0">
                    <i class="fas fa-chart-pie text-warning me-2"></i>
                    Bug Status Distribution
                </h5>
            </div>
            <div class="card-body">
                @if (Model.BugsByStatus.Any())
                {
                    var totalBugs = Model.BugsByStatus.Values.Sum();
                    foreach (var status in Model.BugsByStatus)
                    {
                        var percentage = totalBugs > 0 ? (status.Value * 100.0 / totalBugs) : 0;
                        var badgeClass = GetStatusBadgeClass(status.Key);
                        var progressClass = GetProgressBarClass(status.Key);
                        
                        <div class="mb-3">
                            <div class="d-flex justify-content-between align-items-center mb-1">
                                <span class="text-muted">@status.Key</span>
                                <span class="badge badge-@badgeClass">@status.Value</span>
                            </div>
                            <div class="progress mb-2" style="height: 8px;">
                                <div class="progress-bar bg-@progressClass" style="width: @percentage.ToString("F1")%"></div>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="text-center text-muted py-4">
                        <i class="fas fa-chart-pie fa-2x mb-2"></i>
                        <p>No status data available</p>
                    </div>
                }
            </div>
        </div>
    </div>
    
    <div class="col-md-6">
        <div class="card">
            <div class="card-header bg-light">
                <h5 class="mb-0">
                    <i class="fas fa-exclamation-triangle text-danger me-2"></i>
                    Priority Breakdown
                </h5>
            </div>
            <div class="card-body">
                @if (Model.BugsByPriority.Any())
                {
                    var totalPriorityBugs = Model.BugsByPriority.Values.Sum();
                    foreach (var priority in Model.BugsByPriority.OrderByDescending(p => GetPriorityOrder(p.Key)))
                    {
                        var percentage = totalPriorityBugs > 0 ? (priority.Value * 100.0 / totalPriorityBugs) : 0;
                        var badgeClass = GetPriorityBadgeClass(priority.Key);
                        var progressClass = GetPriorityProgressClass(priority.Key);
                        
                        <div class="mb-3">
                            <div class="d-flex justify-content-between align-items-center mb-1">
                                <span class="text-muted">@priority.Key</span>
                                <span class="badge badge-@badgeClass">@priority.Value</span>
                            </div>
                            <div class="progress mb-2" style="height: 8px;">
                                <div class="progress-bar bg-@progressClass" style="width: @percentage.ToString("F1")%"></div>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="text-center text-muted py-4">
                        <i class="fas fa-exclamation-triangle fa-2x mb-2"></i>
                        <p>No priority data available</p>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<script>
    function handleReportProblem() {
        const isLoggedIn = @Model.IsUserLoggedIn.ToString().ToLower();
        if (isLoggedIn) {
            window.location.href = '/BugReport/Form';
        } else {
            window.location.href = '/Identity/Account/Login';
        }
    }

    // Add some interactive effects
    document.addEventListener('DOMContentLoaded', function() {
        // Animate dashboard cards on load
        const cards = document.querySelectorAll('.dashboard-card');
        cards.forEach((card, index) => {
            card.style.opacity = '0';
            card.style.transform = 'translateY(20px)';
            setTimeout(() => {
                card.style.transition = 'all 0.5s ease';
                card.style.opacity = '1';
                card.style.transform = 'translateY(0)';
            }, index * 100);
        });

        // Add click effects to cards
        cards.forEach(card => {
            card.addEventListener('click', function() {
                this.style.transform = 'scale(0.98)';
                setTimeout(() => {
                    this.style.transform = 'scale(1)';
                }, 150);
            });
        });
    });
</script>