@using BugTrackingSystem.ViewModels.BugReport
@model BugReportFormViewModel

<div class="container">
    <h1>@(Model.Id == null ? "Create Bug Report" : "Edit Bug Report")</h1>
    <form asp-action="Form" method="post">
        @if (Model.Id != null)
        {
            <input type="hidden" asp-for="Id" />
        }

        <div asp-validation-summary="ModelOnly" class="text-danger"></div>

        <div class="form-group">
            <label asp-for="Title"></label>
            <input type="text" class="form-control" asp-for="Title" />
            <span asp-validation-for="Title" class="text-danger"></span>
        </div>

        <div class="form-group">
            <label asp-for="Description"></label>
            <textarea class="form-control" asp-for="Description" rows="5"></textarea>
            <span asp-validation-for="Description" class="text-danger"></span>
        </div>

        <div class="form-group">
            <label asp-for="PriorityId"></label>
            <select asp-for="PriorityId" class="form-control">
                <option value="">-- Select priority --</option>
                @foreach (var priority in Model.Priorities)
                {
                    <option value="@priority.Id">@priority.Name</option>
                }
            </select>
            <span asp-validation-for="PriorityId" class="text-danger"></span>
        </div>

        <div class="form-group">
            <label asp-for="ApplicationId"></label>
            <select asp-for="ApplicationId" class="form-control">
                <option value="">-- Select application --</option>
                @foreach (var app in Model.Applications)
                {
                    <option value="@app.Id">@app.Name</option>
                }
            </select>
            <span asp-validation-for="ApplicationId" class="text-danger"></span>
        </div>

        <div class="form-group">
            <label asp-for="StatusId"></label>
            <select asp-for="StatusId" class="form-control" disabled="@(Model.CanEditStatus ? null : "disabled")">
                <option value="">-- Select status --</option>
                @foreach (var status in Model.Statuses)
                {
                    <option value="@status.Id">@status.Name</option>
                }
            </select>
            <input type="hidden" asp-for="StatusId" />
            <span asp-validation-for="StatusId" class="text-danger"></span>
        </div>

        <div class="form-group">
            <label asp-for="AssignedToUserId">Assigned QA</label>
            <select asp-for="AssignedToUserId" class="form-control">
                <option value="">-- Select QA assignee --</option>
                @foreach (var user in Model.Users)
                {
                    <option value="@user.Id">@user.UserName</option>
                }
            </select>
            <span asp-validation-for="AssignedToUserId" class="text-danger"></span>
        </div>

        @if (Model.ShowDeveloperDropdown)
        {
            <div class="form-group" id="developerDropdown">
                <label asp-for="DeveloperId">Assigned Developer</label>
                <select asp-for="DeveloperId" class="form-control">
                    <option value="">-- Select developer --</option>
                    @foreach (var developer in Model.Developers)
                    {
                        <option value="@developer.Id">@developer.UserName</option>
                    }
                </select>
                <span asp-validation-for="DeveloperId" class="text-danger"></span>
                <small class="form-text text-muted">
                    Select a developer when moving to "In Development" status.
                </small>
            </div>
        }

        <button type="submit" class="btn btn-primary">Submit</button>
        
        @if (Model.Id != null)
        {
            @await Html.PartialAsync("_AdminSubscription", Model.Id.Value)
        }
    </form>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const statusSelect = document.querySelector('select[name="StatusId"]');
    const developerDropdown = document.getElementById('developerDropdown');
    
    if (statusSelect && developerDropdown) {
        // Function to toggle developer dropdown visibility
        function toggleDeveloperDropdown() {
            const selectedOption = statusSelect.options[statusSelect.selectedIndex];
            const statusName = selectedOption.text;
            
            if (statusName === 'In Development') {
                developerDropdown.style.display = 'block';
                // Make developer selection required when status is "In Development"
                const developerSelect = developerDropdown.querySelector('select');
                if (developerSelect) {
                    developerSelect.setAttribute('required', 'required');
                }
            } else {
                developerDropdown.style.display = 'none';
                // Remove required attribute when not needed
                const developerSelect = developerDropdown.querySelector('select');
                if (developerSelect) {
                    developerSelect.removeAttribute('required');
                    developerSelect.value = ''; // Clear selection
                }
            }
        }
        
        // Initial check
        toggleDeveloperDropdown();
        
        // Listen for status changes
        statusSelect.addEventListener('change', toggleDeveloperDropdown);
    }
});
</script>

<style>
#developerDropdown {
    border-left: 3px solid var(--accent-orange);
    padding-left: 15px;
    margin-left: 10px;
    background: rgba(237, 137, 54, 0.05);
    border-radius: 4px;
    padding: 15px;
}

#developerDropdown label {
    color: var(--accent-orange);
    font-weight: 600;
}

.form-group {
    margin-bottom: 1.5rem;
}

.form-group label {
    font-weight: 600;
    color: var(--dark-gray);
    margin-bottom: 0.5rem;
}

.form-control:focus {
    border-color: var(--primary-blue);
    box-shadow: 0 0 0 0.2rem rgba(30, 58, 138, 0.25);
}
</style>